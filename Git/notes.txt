ctrl+l # clean the terminal
git init           # to initialize the git in any folder
git config --global user.email "kishansutariya7533@gmail.com"
git config --global user.name "kishansutariya23"
-----------------------------------------------------------------
git status
git add .
git commit -m "message"


git log -n 1              # to check only 1(n) comments
git log --author="name"     # get a specific author who is doing changes

git log --since=2021-09-04  #from date
git log --until=2022-05-23  # to date
# we can combine above both
--------------------------------------------------------------------------
git diff   # a means old and b is new 
           # used for checking the difference btw and change made by some one if 
            # we leave the laptop open and go out
ex:- we made commit and by mistake we remove the line from file and dont know what was there in that line
then this git diff will save us, by showing the difference what was there at commit and what is new(removed line).
NOTE:- it will show diff only of red files(not present in staging area)
--------------------------------------------------------------------------------------------------------------
git diff --staged   # to check diff of file present in staging area(before comit)

----------------------------------------------------------------------------------------------------------------
### suppose you delete file manually and see the status them you will see red saying some file is missing when i was tracking by git
### so do below step. in place of file_name give deleted file name

git rm file_name
git status  #green
git commit -m "code way delete justify"

NOTE:- dont delete manually use above directly
-------------------------------------------------------------------------------------------------------------------------------
git checkout filename # to get previous code come back if some thing big is removed.


git restore --staged file_name  # if we accidently add any file in staging area and we want to modify some lines of code to that file
                                # we unstage them os it will be green--->red
------------------------------------------------------------------------------------------------------------------------------------------------
reset the commit:-   ONLY LAST COMIT
we can reset only last comit only as it only depends on 1 previous comit
we cant reset a 10comit back as it will be depend on previous and if 1 is changed othere will be reflected so 
there is no concept of reset,
but only last comit can be changed/reset.

git log
git add .
git commit --amend -m "commit"
git status

# for changing commit also we can use amend see below
git commit --amend -m "changed the commit"
git status


for above you will see change in only commit but not in file.
-===========================================================================================================================
coming back to previous version(commit) it can be any previous comit.
# reset means losing data

git checkout comit_id -- filename_which_u_wnt_to get back 
git status
git diff --staged  # to check what is you will get and see diff between both versions
git reset HEAD file_name_you_mentioned_above

and when you close that file and open again you will see the changes.
----------------------------------------------------------------------------------------
RESET 
     # soft ---->safe
     # mixed ---->default
     # hard ----->caution
check video
git reset --hard id
git reset --soft id
git reset --mixed id
   or
git reset id

short cut with ~  ===> git reset HEAD~n  
n=1....
~1 == ^1
~2 == ^^2
-----------------------------------------------------------------------------
IGNORE FILES 


if you want to remove files which are in red then use below cmd
git clean -n  # show all files that are red and ready to removed
git clean -f  # remove completely 
git status    # NO RED lines

best way:-   .gitignore
git add .gitignore
git commit -m ".ignore files"


# hash in .gitignore is commit all should be in new line
*.js ==> for ignoring all js files
foldername/  ==> for ignoring folder
assets/videos/
*.mp4
*.log
DS_Store
!app.js # if you waant only this js file not to be ignored.
-------------------------------------------------------------------------------
Some time you commit any .php file and later on your boss says ignore the php files and track others.
later you decided to add that php in ignore file
and when you do changes to php your ignore will not listen to yoh as you have already place tracker on that php 
so best way is
add that file in ignore then follow below steps

git rm --cached my.php
git status # it will say deleted php file(green)
git add .
git commit -m "php deleted for ignore"
## rm --cached  will not delete the file from folder instead it will start untrack of files 
----------------------------------------------------------------------------------------------------------
Note:- git wont track empty folders
.gitkeep # file name for trick
git status # now empty folder is also been listed as we have that .gitkeep file in folder
-------------------------------------------------------------------------------------------------------------------
git ls-tree
git ls-tree HEAD  # last is current
git ls-tree master
git ls-tree commit_id
git ls-tree HEAD~3
 
CHECK GIT LOG
--------------------------------------------------------------------------------------
git log --oneline
git log --oneline -3 # last 3 logs
git log start_id..head_id # for range of all commit between
git log --since="2018-08-22"
git log --until="2018-08-22"  #opp pf since
git log --since='' --until=''
git log --since="1 week ago"

git log --author='kishan' #pattern
git log --grep="reset" # message check for reset

git log --format=oneline
git log --format=short # short version of all log
git log --format=email
git log --pretty
-------------------------------------------------------------------------------------------------------------
Branching
try new ideas, collaboration, merging, content switching

git branch  # *==> represent main branch
git branch new_nav #dont use symbols and space
git branch  # it show  master 
git branch 
git checkout new_nav
git branch #new branch
#make changes to file 
git -am "commit"
--------------------------
new way of creating branch
git checkout -b branch_name  # create and swith to new branch
$ git log --graph --oneline --decorate
$ git log --graph --oneline --decorate --all # all branch commits
 # go changes in mainn branch
git checkout new_footer #error
git checkout --filename   #to remove and make exact as master branch last commit
------------------
rename & delete
#### all-ways be on master to make delete

git diff new_nav..new_footer # to check diff btw 2 branch
git branch -m new_nav new_navigation # rename the branch


git branch delete_me
git branch --delete delete_me
     or
git branch --d delete_me
git branch --D delete_me   # if you have problem with delete as there are commits 
                            and want to delete then use "D" 

====================================================================================================
####     merge
git status
git branch  #main
git checkout -b new_chart
###### make some modificaation on file
git commit -am "chart fun add" 
git checkout master

git branch # main branch 
           NOTE: IF YOU WANT TO MERGE BOTH BRANCH THEN YOU SHOULD BE ON THAT BRANCH IT MIGHT NOT BE MASTE
git merge new_chart  # we already on receiver(master) 
              #new_chart will merge with master


git merge --no-ff branch_name # no fast forward , so all logs can be tracked which are part of new branch
git merge --ff-only branch_name # if possible then do it thats it
-------------------------------------------------------------------------------
conflits & stashing ===> watch again
make new branch and do edit in both new as well as master so git gets confused :(

git log --graph --oneline --all --decorate  # for flow chart of branch
------------------------------------------------------------
---------------------------

======================================================================================================================
UPLOAD

git branch
git remote
git remote add origin www.https://link.git
git remote #origin
git remote -v
cat .git/config
git branch
git push -u origin master  # dialog box will open asking for authentication
--------------------------------
download/clone file
NOTE:- make sure you clone in such a way that there is no git init in that folder.

git clone https://github.com/kishansutariya23/readme-files.git folder_name 
     # folder name is optional, in case you want to change the folder name then u can give it
#### after above thing there is no need to initialize the git as we make copy of remote to local
####
cd readme-files
git status # it will say origin/master, tree....


if we make any changes then we can directly make push no need of anhy link now as our bash knows us.


so i have already push the files now i will make change to the file in master branch and then push 
so other person from othert nation can see my code.
------------------------------------------
git fetch 
git branch 
git merge origin/master

## git pull # fetch+merge


========================================
git tag ticket231 id
git -a ticket324 -m "resolved ticket324 commit" id

git tag --list #check ticket
git tag -l -n
git -a V2.3 -m "stable version of project" id
git tag -ln
----------------------------------------------------
tag in github


tag to github # if important then only do this
GIT PUSH ORIGIN TICKET324
git push origin --tags # all tags